import asyncio
import random

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton
from aiogram import types
from keyboards import for_quantity, for_restart, for_destinations, for_manager
from utils import price_calculator, format_checker

from utils import price_calculator

from create_bot import destinations, managers

class Form(StatesGroup):
    destination = State()
    quantity = State()
    dimensions = State()
    weight = State()

capture_router = Router()

@capture_router.message(F.text == "–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º.")
async def pick_destination(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üìç–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏:",
                         reply_markup=for_destinations.get_keyboard())
    await state.set_state(Form.destination)


@capture_router.callback_query(F.data.startswith("dest_"), Form.destination)
async def pick_quantity(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer()
    dest_id = int(callback.data.replace('dest_', ''))
    dest_data = destinations[dest_id]["dest"]
    await state.update_data(destination=dest_data)
    await callback.message.answer(f"üìç‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n<b>{dest_data}</b>")
    await bot.send_message(chat_id=callback.message.chat.id,
                           text="üé≤ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤—ã—Ö –º–µ—Å—Ç –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ:",
                           reply_markup=for_quantity.get_keyboard())
    await state.set_state(Form.quantity)

@capture_router.callback_query(F.data.startswith("num_"), Form.quantity)
async def callbacks_num(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer()
    button = callback.data.split("_")[1]
    if button == "more":
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ:")
    else:
        await state.update_data(quantity=int(button))
        await callback.message.answer(f"üé≤ ‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: <b>{button}</b>")
        await bot.send_message(chat_id=callback.message.chat.id,
                               text="üì¶ –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —É–∫–∞–∂–µ–º –≥–∞–±–∞—Ä–∏—Ç—ã –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞.\n\n–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≤ <u>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</u> (—Å–º) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–î—Ö–®—Ö–í</b>\n<blockquote>–ü—Ä–∏–º–µ—Ä: 100—Ö100—Ö100</blockquote>\n\n–ï—Å–ª–∏ –≥—Ä—É–∑–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –æ–¥–∏–Ω, –∫–∞–∂–¥—ã–π <u>—Ä–∞–∑–º–µ—Ä –ø–∏—à–∏—Ç–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</u>.\n<blockquote>–ü—Ä–∏–º–µ—Ä:\n100—Ö100—Ö100\n100—Ö100—Ö100\n100—Ö100—Ö100</blockquote>",
                               reply_markup=for_restart.get_keyboard())
        await state.set_state(Form.dimensions)

@capture_router.message(Form.quantity, lambda message: (message.text.isalpha() and message.text != None))
async def wrong_format(message: Message, state: FSMContext, bot: Bot):
    await message.answer("‚ùå –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤—ã—Ö –º–µ—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", reply_markup=for_restart.get_keyboard())

@capture_router.message(Form.quantity, lambda message: message.text.isdigit())
async def start_calculation(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(quantity=int(message.text))
    await message.answer(f"üé≤ ‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: <b>{message.text}</b>")
    await bot.send_message(chat_id=message.chat.id,
                           text="üì¶ –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —É–∫–∞–∂–µ–º –≥–∞–±–∞—Ä–∏—Ç—ã –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞.\n\n–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≤ <u>—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö</u> (—Å–º) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–î—Ö–®—Ö–í</b>\n<blockquote>–ü—Ä–∏–º–µ—Ä: 100—Ö100—Ö100</blockquote>\n\n–ï—Å–ª–∏ –≥—Ä—É–∑–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –æ–¥–∏–Ω, –∫–∞–∂–¥—ã–π <u>—Ä–∞–∑–º–µ—Ä –ø–∏—à–∏—Ç–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</u>.\n<blockquote>–ü—Ä–∏–º–µ—Ä:\n100—Ö100—Ö100\n100—Ö100—Ö100\n100—Ö100—Ö100</blockquote>",
                         reply_markup=for_restart.get_keyboard())
    await state.set_state(Form.dimensions)


@capture_router.message(F.text != "üîÑ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ!", Form.dimensions)
async def start_calculation(message: Message, state: FSMContext, bot: Bot):
    msg = message.text
    quantity = await state.get_data()
    quantity = quantity.get("quantity")
    splitted = re.split(r"[-;,.\s\n]\s*", msg)
    splitted = [s.strip() for s in splitted]
    if len(splitted) != quantity:
        await message.reply("‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –≥–∞–±–∞—Ä–∏—Ç—ã –Ω–µ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤—ã—Ö –º–µ—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", reply_markup=for_restart.get_keyboard())
        await state.set_state(Form.dimensions)
    else:
        if format_checker.check_dimensions(splitted):
            await state.update_data(dimensions=splitted)
            text = "üì¶ ‚úÖ –†–∞–∑–º–µ—Ä—ã –í–∞—à–∏—Ö –≥—Ä—É–∑–æ–≤ —Å–ª–µ–¥—É—é—â–∏–µ:\n\n"
            for i, dim in enumerate(splitted):
                text += f"<b>{i + 1}. {dim} —Å–º</b>\n"
            messg = await message.answer(text)
            await bot.send_message(chat_id=messg.chat.id, text="ü™ù –û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞.\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞ –≤ <u>–∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö</u> (–∫–≥).\n<blockquote>–ü—Ä–∏–º–µ—Ä: 100</blockquote>\n\n–ï—Å–ª–∏ –≥—Ä—É–∑–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –æ–¥–∏–Ω, –∫–∞–∂–¥—ã–π <u>–≤–µ—Å –ø–∏—à–∏—Ç–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</u>.\n<blockquote>–ü—Ä–∏–º–µ—Ä:\n100\n250\n300</blockquote>", reply_markup=for_restart.get_keyboard())
            await state.set_state(Form.weight)
        else:
            await message.answer("üôÅ –í—ã —É–∫–∞–∑–∞–ª–∏ –≥–∞–±–∞—Ä–∏—Ç—ã –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=for_restart.get_keyboard())
            await state.set_state(Form.dimensions)


@capture_router.message(F.text != "üîÑ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ!", Form.weight)
async def start_calculation(message: Message, state: FSMContext, bot: Bot):
    msg = message.text
    quantity = await state.get_data()
    quantity = quantity.get("quantity")
    splitted = re.split(r"[-;,.\s]\s*", msg)
    splitted = [s.strip() for s in splitted]
    if len(splitted) != quantity:
        await message.reply("‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –≤–µ—Å–∞ –Ω–µ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤—ã—Ö –º–µ—Å—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", reply_markup=for_restart.get_keyboard())
        await state.set_state(Form.weight)
    else:
        if format_checker.check_weights(splitted):
            await state.update_data(weight=splitted)
            text = "ü™ù‚úÖ –í–µ—Å –∫–∞–∂–¥–æ–≥–æ –í–∞—à–µ–≥–æ –≥—Ä—É–∑–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–π:\n\n"
            for i, weight in enumerate(splitted):
                text += f"<b>{i + 1}. {weight} –∫–≥</b>\n"
            messg = await message.answer(text)
            data = await state.get_data()

            quantity = data.get('quantity')
            dimensions = data.get('dimensions')
            weights = data.get('weight')

            price = price_calculator.calculate(quantity, dimensions, weights)


            new_msg = await bot.send_message(messg.chat.id,"–û—Ç–ª–∏—á–Ω–æ!\n\nüí∞–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏:\n"
                                 f"<u>{price:.0f}</u>", reply_markup=for_restart.get_keyboard())
            await state.clear()
            await asyncio.sleep(3)
            await bot.send_message(chat_id=new_msg.chat.id, text="üë©üèº‚Äçüíº –•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π?", reply_markup=for_manager.get_keyboard())

        else:
            await message.answer("üôÅ –í—ã —É–∫–∞–∑–∞–ª–∏ –≤–µ—Å–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=for_restart.get_keyboard())
            await state.set_state(Form.weight)


@capture_router.callback_query(F.data.startswith("ans_"))
async def need_manager(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    await call.answer()
    button = call.data.split("_")[1]
    if button == "1":
        name, phone = random.choice(managers)
        await call.message.answer(f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n\n‚òéÔ∏è –í–æ—Ç –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n{phone}, {name}")
    else:
        await call.message.answer(f"–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!\n–î–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—á—ë—Ç –∑–∞–Ω–æ–≤–æ!</b>")



@capture_router.message(F.text == "üîÑ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ!")
async def restart_calculation(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üìç–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏:",
                         reply_markup=for_destinations.get_keyboard())
    await state.set_state(Form.destination)
